[{"/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/main.ts":"1","/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/App.vue":"2","/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/router/index.ts":"3","/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/views/HomePage.vue":"4","/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/components/TableComp.vue":"5","/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/components/GraphComp.vue":"6","/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/components/NodeConfigPanel.vue":"7"},{"size":458,"mtime":1659300582000,"results":"8","hashOfConfig":"9"},{"size":1494,"mtime":1660591024000,"results":"10","hashOfConfig":"9"},{"size":346,"mtime":1659298098000,"results":"11","hashOfConfig":"9"},{"size":4214,"mtime":1664045012665,"results":"12","hashOfConfig":"9"},{"size":8437,"mtime":1664045052276,"results":"13","hashOfConfig":"9"},{"size":10126,"mtime":1664043748081,"results":"14","hashOfConfig":"9"},{"size":3460,"mtime":1659902794000,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ii2jzw",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/main.ts",[],"/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/App.vue",[],"/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/router/index.ts",[],"/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/views/HomePage.vue",["33","34","35","36"],"<template>\n<div class=\"wrapper\">\n  <div class=\"box\" id=\"box\">\n\n  <TableComp :dataset=\"dataset\" :persona=\"persona\" :getdata=\"getdata\"/>\n  </div>\n  <div @mouseover=\"res\" class=\"handler\"></div>\n  <div class=\"box\" id=\"box\">\n\n  <GraphComp :prac=\"data\" :target=\"target\" :source=\"source\"  />\n</div>\n</div>\n\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from \"vue\"\nimport dataset from \"./ds.json\"\nimport persona from \"./persona.json\"\nimport TableComp from '../components/TableComp.vue'\nimport GraphComp from '../components/GraphComp.vue'\n\n\nexport default defineComponent ({\n  name: 'HomePage',\n  props: {},\n  components: {\n      TableComp,\n      GraphComp\n   },\n  data(){\n    return {\n      dataset:dataset,\n      persona:persona,\n      data:{},\n      table_data_child:{},\n      source_from_table:String,\n      target_from_table:String,\n      source:String,\n      target:String      \n    }\n  },\n  methods: {\n    getdata(table_data_child: any,source_from_table: any,target_from_table: any){\n      this.data = table_data_child\n      this.source = source_from_table\n      this.target = target_from_table\n      console.log(this.source)\n      console.log(this.target)\n    },\n    res(){\n          var handler = document.querySelector('.handler') as HTMLElement;\n          var wrapper = handler.closest('.wrapper') as HTMLElement;\n          var boxA = wrapper.querySelector('.box') as HTMLElement;\n          var isHandlerDragging = false;\n\n          document.addEventListener('mousedown', function(e) {\n            if (e.target === handler) {\n              isHandlerDragging = true;\n            }\n          });\n\n          document.addEventListener('mousemove', function(e) {\n            if (!isHandlerDragging) {\n              return false;\n            }\n            var containerOffsetLeft = wrapper.offsetLeft;\n            var pointerRelativeXpos = e.clientX - containerOffsetLeft;\n            var boxAminWidth = 60;\n            boxA.style.width = (Math.max(boxAminWidth, pointerRelativeXpos - 8)) + 'px';\n            boxA.style.flexGrow = \"0\";\n          });\n\n          document.addEventListener('mouseup', function(e) {\n            isHandlerDragging = false;\n          });\n    }\n  }\n})\n</script>\n\n<style scoped>\nbody {\n  margin: 40px;\n}\n\n.wrapper {\n  /*background-color: #fff;\n  color: #fff;*/\n  /* Use flexbox */\n  display: flex;\n}\n\n.box {\n  /*background-color: #fff;*/\n  /*color: #fff;*/\n  border-radius: 5px;\n  padding: 20px;\n  font-size: 150%;\n  \n  /* Use box-sizing so that element's outerwidth will match width property */\n  box-sizing: border-box;\n  \n  /* Allow box to grow and shrink, and ensure they are all equally sized */\n  flex: 1 1 auto;\n}\n\n.handler {\n  width: 20px;\n  padding: 0;\n  cursor: ew-resize;\n  flex: 0 0 auto;\n}\n\n.handler::before {\n  content: '';\n  display: block;\n  width: 4px;\n  height: 100%;\n  background: grey;\n  margin: 0 auto;\n}\n\n/*\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-size: 1.25rem;\n  font-family: sans-serif;\n  line-height: 150%;\n  text-shadow: 0 2px 2px #b6701e;\n}\n\nsection {\n  text-align: center;\n}\ndiv {\n  height: 68%;\n}\n\narticle {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 100%;\n  padding: 20px;\n}\n\nh1 {\n  font-size: 1.75rem;\n  margin: 0 0 0.75rem 0;\n}\n\n.container {\n  display: table;\n  width: 100%;\n}\n\n.left-half {\n  position: absolute;\n  left: 0px;\n  width: 55%;\n}\n\n.right-half {\n  position: absolute;\n  right: 0px;\n  width: 45%;\n}\n.wrapper {\n  width: 100%;\n  height: 50%;\n  color: black;\n  overflow:hidden;\n}\n\n.flex_box {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\nform {\n  position: absolute;\n  padding: 30px 20px;\n  width: 320px;\n  border-radius: 7px;\n  background-color: white;\n  backdrop-filter: blur(5px);\n  background-color: rgba(158, 189, 199, 0.288);\n  overflow: hidden;\n}\n.input {\n  display: flex;\n  flex-direction: column;\n}\n.button_wrapper {\n  display: flex;\n  justify-content: flex-end;\n}\nbutton {\n  padding: 8px 14px;\n  margin: 20px 8px 0 0;\n  border-width: 0px;\n  border-radius: 5px;\n  color: white;\n  background-color: #2dd2a6;\n  transition: 0.3s;\n  z-index: 1;\n}\n\nbutton:hover {\n  color: rgb(60, 35, 153);\n  background-color: white;\n}\n*/\n</style>","/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/components/TableComp.vue",[],"/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/components/GraphComp.vue",["37","38"],"<template>\r\n<section class=\"container\">\r\n  <div>\r\n  <div class=\"demo-control-panel\">\r\n    <el-tabs type=\"border-card\">\r\n      <!--<el-tab-pane label=\"Operations on Nodes\">\r\n        <div class=\"control\">\r\n          <label>Field to show on the nodes : </label>\r\n          <el-select v-model=\"configs.node.label.text\">\r\n          <el-option label=\"Source and Target\" value=\"name\" />            \r\n            <el-option label=\"URL\" value=\"URL\" />\r\n          </el-select>\r\n        </div>        \r\n      </el-tab-pane>-->\r\n      <el-tabs>\r\n            <el-tab-pane label=\"hover\">\r\n              <demo_label_config_panel\r\n                v-model:type=\"configs.node.hover.type\"\r\n                v-model:radius=\"configs.node.hover.radius\"\r\n                v-model:width=\"configs.node.hover.width\"\r\n                v-model:height=\"configs.node.hover.height\"\r\n                v-model:borderRadius=\"configs.node.hover.borderRadius\"\r\n                v-model:strokeWidth=\"configs.node.hover.strokeWidth\"\r\n                v-model:strokeColor=\"configs.node.hover.strokeColor\"\r\n                v-model:strokeDasharray=\"configs.node.hover.strokeDasharray\"\r\n                v-model:color=\"configs.node.hover.color\"\r\n              />\r\n            </el-tab-pane>\r\n            <el-tab-pane label=\"selected\">\r\n              <demo_label_config_panel\r\n                v-model:type=\"configs.node.selected.type\"\r\n                v-model:radius=\"configs.node.selected.radius\"\r\n                v-model:width=\"configs.node.selected.width\"\r\n                v-model:height=\"configs.node.selected.height\"\r\n                v-model:borderRadius=\"configs.node.selected.borderRadius\"\r\n                v-model:strokeWidth=\"configs.node.selected.strokeWidth\"\r\n                v-model:strokeColor=\"configs.node.selected.strokeColor\"\r\n                v-model:strokeDasharray=\"configs.node.selected.strokeDasharray\"\r\n                v-model:color=\"configs.node.selected.color\"\r\n              />\r\n            </el-tab-pane>\r\n            </el-tabs>\r\n    </el-tabs>\r\n    <input type=\"checkbox\" id=\"force\" v-model=\"d3ForceEnabled\">\r\n      <label for=\"force\">D3-Force enabled</label>\r\n\r\n      <div class=\"fit_zoom\">\r\n          <el-button @click=\"graph?.panToCenter()\">To center</el-button>\r\n          <el-button @click=\"graph?.fitToContents()\">Fit</el-button>\r\n          <el-button @click=\"graph?.zoomIn()\">Zoom In</el-button>\r\n          <el-button @click=\"graph?.zoomOut()\">Zoom Out</el-button>\r\n\r\n        </div>\r\n  </div>\r\n  <el-button type=\"warning\" round @click=\"gr\">Create Graph </el-button>\r\n  <el-button type=\"primary\" @click=\"downloadasSVG\">\r\n      <el-icon><download /></el-icon>\r\n      Download Graph\r\n    </el-button>\r\n    \r\n  <v-network-graph ref=\"graph\"\r\n            :nodes=\"nodes\"\r\n            :edges=\"edges\"\r\n            :configs=\"configs\"\r\n            :event-handlers=\"eventHandlers\"/>  \r\n\r\n  \r\n  </div>  \r\n  \r\n  </section>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport { ref,reactive, toRefs } from 'vue'\r\nimport demo_label_config_panel from '@/components/NodeConfigPanel.vue'\r\nimport { defineComponent } from \"vue\"\r\nimport * as vNG from \"v-network-graph\"\r\nexport default defineComponent ({\r\n  name: 'GraphView',\r\n  props: ['prac','source','target'],\r\n  components: {\r\n    demo_label_config_panel\r\n  },\r\n  data(){\r\n    return {\r\n      e1:\"\",\r\n      e2:\"\",\r\n    nodes:{} as { [key: string]: { name: string;URL:string;size: number;label: boolean;color:string } },\r\n    edges:{} as { [key: string]: { source: string; target: string} },\r\n    //graph:ref<vNG.Instance>()\r\n    }\r\n  },\r\n  methods: {\r\n    gr() {    \r\n    //  const { prac } = toRefs(props)\r\n    //  const n = reactive( prac.value )\r\n    //  const n= prac.length\r\n    const n = this.prac\r\n    this.nodes={}\r\n    this.edges={}\r\n    const x = this.source\r\n    const y = this.target\r\n    console.log(x)\r\n    console.log(this.target)\r\n    for (let i = 0; i < n.length; i++) {\r\n    this.nodes[`${n[i][x]}`] = {\r\n    name: `${n[i][x]}`,\r\n    URL: `${n[i].URL}`,\r\n    size: 12,\r\n    label: true,\r\n    color:`Red`\r\n  },\r\n  this.nodes[`${n[i][y]}`] = {\r\n    name: `${n[i][y]}`,\r\n    URL: `${n[i].URL}`,\r\n    size: 12,\r\n    label: true,\r\n    color:`blue`\r\n  };\r\n}\r\n    for (let i=0;i<n.length;i++){      \r\n      this.edges[`edge${i}`]={\r\n        source:`${n[i][x]}`,\r\n        target:`${n[i][y]}`\r\n      }\r\n    }\r\n    console.log(this.nodes)\r\n    console.log(this.edges)\r\n  // return { this.nodes, this.edges }\r\n  }\r\n  \r\n  \r\n}})\r\n</script>\r\n\r\n<script setup lang='ts'>\r\nimport { computed } from \"vue\"\r\nimport {ForceLayout} from \"v-network-graph/lib/force-layout\"\r\nimport {VNetworkGraphInstance, EventHandlers } from \"v-network-graph\"\r\nconst configs = reactive(\r\n  vNG.defineConfigs({\r\n    view: {\r\n      boxSelectionEnabled: true,\r\n      autoPanOnResize: true,\r\n      minZoomLevel: 0.1,\r\n      maxZoomLevel: 16,\r\n      layoutHandler: new ForceLayout({\r\n        positionFixedByDrag: false,\r\n        positionFixedByClickWithAltKey: true\r\n      }),\r\n    },\r\n    node: {\r\n      selectable: true,\r\n      normal: {\r\n        type: \"circle\",\r\n        radius: node => node.size, // Use the value of each node object\r\n        color: node => node.color,\r\n      },\r\n      hover: {\r\n        type: \"circle\",\r\n        radius: node => node.size + 2,\r\n        color: \"#dd2288\",\r\n        // for type is \"rect\" -->\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: 4,\r\n        // <-- for type is \"rect\"\r\n        strokeWidth: 0,\r\n        strokeColor: \"#000000\",\r\n        strokeDasharray: \"0\",\r\n      },\r\n      selected: {\r\n        type: \"circle\",\r\n        radius: node => node.size + 2,\r\n        // for type is \"rect\" -->\r\n        width: 32,\r\n        height: 32,\r\n        borderRadius: 4,\r\n        // <-- for type is \"rect\"\r\n        strokeWidth: 0,\r\n        strokeColor: \"#000000\",\r\n        strokeDasharray: \"0\",\r\n        color:\"#4466cc\",\r\n      },\r\n      label: {\r\n        visible: node => !!node.label,\r\n        fontFamily: undefined,\r\n        fontSize: 11,\r\n        lineHeight: 1.1,\r\n        color: \"#000000\",\r\n        margin: 4,\r\n        direction: \"south\",\r\n        background: {\r\n          visible: false,\r\n          color: \"#ffffff\",\r\n          padding: {\r\n            vertical: 1,\r\n            horizontal: 4,\r\n          },\r\n          borderRadius: 2,\r\n        },\r\n      },\r\n      focusring: {\r\n        visible: true,\r\n        width: 4,\r\n        padding: 3,\r\n        dasharray: \"0\",\r\n        color: \"darkgray\",\r\n      },\r\n    },\r\n    edge: {\r\n      selectable: true,\r\n      normal: {\r\n        width: edge => edge.width, // Use the value of each edge object\r\n        color: edge => edge.color,\r\n        dasharray: edge =>(edge.dashed ? \"4\" : \"0\"),\r\n      },\r\n      marker: {\r\n        source: {\r\n          type: \"none\",\r\n          width: 4,\r\n          height: 4,\r\n          margin: -1,\r\n          units: \"strokeWidth\",\r\n          color: null,\r\n        },\r\n        target: {\r\n          type: \"arrow\",\r\n          width: 10,\r\n          height: 10,\r\n          margin: -1,\r\n          units: \"strokeWidth\",\r\n          color: null,\r\n        },\r\n    },\r\n    },\r\n  })\r\n)\r\nconst d3ForceEnabled = computed({\r\n  get: () => configs.view.layoutHandler instanceof ForceLayout,\r\n  set: (value: boolean) => {\r\n    if (value) {\r\n      configs.view.layoutHandler = new ForceLayout()\r\n    } else {\r\n      configs.view.layoutHandler = new vNG.SimpleLayout()\r\n    }\r\n  },\r\n})\r\nconst graph = ref<vNG.Instance>()\r\nfunction downloadasSVG(){\r\n    if(!graph.value) return\r\n    const text = graph.value.getAsSvg()\r\n    const url = URL.createObjectURL(new Blob([text],{type:\"octet/stream\"}))\r\n    const a = document.createElement(\"a\")\r\n    a.href = url\r\n    a.download = \"graph.svg\"\r\n    a.click()\r\n    window.URL.revokeObjectURL(url)\r\n    //console.log(text)\r\n    \r\n  }\r\n  const isBoxSelectionMode = ref(false)\r\nconst eventHandlers: EventHandlers = {\r\n  \"view:mode\": mode => {\r\n    // Observe mode change events\r\n    isBoxSelectionMode.value = mode === \"box-selection\"\r\n  },\r\n}\r\n//const zoomLevel = ref(1)\r\n</script>\r\n\r\n<style scoped>\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-size: 1.25rem;\r\n  font-family: sans-serif;\r\n  line-height: 150%;\r\n  text-shadow: 0 2px 2px #b6701e;\r\n}\r\n\r\nsection {\r\n  text-align: center;\r\n}\r\ndiv {\r\n  height: 68%;\r\n}\r\n\r\narticle {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 100%;\r\n  padding: 20px;\r\n}\r\n\r\nh1 {\r\n  font-size: 1.75rem;\r\n  margin: 0 0 0.75rem 0;\r\n}\r\n\r\n/* Pattern styles */\r\n.container {\r\n  display: table;\r\n  width: 100%;\r\n}\r\n\r\n.left-half {\r\n  position: absolute;\r\n  left: 0px;\r\n  width: 60%;\r\n}\r\n\r\n.right-half {\r\n  position: absolute;\r\n  right: 0px;\r\n  width: 40%;\r\n}\r\n.wrapper {\r\n  width: 100%;\r\n  height: 50%;\r\n  color: black;\r\n  overflow:hidden;\r\n}\r\n\r\n.flex_box {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n}\r\nform {\r\n  position: absolute;\r\n  padding: 30px 20px;\r\n  width: 320px;\r\n  border-radius: 7px;\r\n  background-color: white;\r\n  backdrop-filter: blur(5px);\r\n  background-color: rgba(158, 189, 199, 0.288);\r\n  overflow: hidden;\r\n}\r\n.input {\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n.button_wrapper {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n}\r\nbutton {\r\n  padding: 8px 14px;\r\n  margin: 20px 8px 0 0;\r\n  border-width: 0px;\r\n  border-radius: 5px;\r\n  color: white;\r\n  background-color: #2dd2a6;\r\n  transition: 0.3s;\r\n  z-index: 1;\r\n}\r\n\r\nbutton:hover {\r\n  color: rgb(60, 35, 153);\r\n  background-color: white;\r\n}\r\n.outer-box {\r\n  margin: 12px;\r\n  width: 100%;\r\n  height: 700px;\r\n  position: relative;\r\n  background-color: #ffffff;\r\n}\r\n.resizable {\r\n  position: relative;\r\n  resize: both;\r\n  overflow: hidden;\r\n  min-width: 100px;\r\n  min-height: 100px;\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 1px solid #444444;\r\n  background-color: #ffffff;\r\n}\r\n.handle {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n  width: 0;\r\n  height: 0;\r\n  border-top: 8px solid transparent;\r\n  border-left: 8px solid transparent;\r\n  border-right: 8px solid #ff8f8f;\r\n  border-bottom: 8px solid #ff8f8f;\r\n  pointer-events: none;\r\n}\r\n</style>\r\n","/Users/harshpanday/Desktop/old_laptop/RA/RCN/rcn_site/src/components/NodeConfigPanel.vue",["39","40"],"<!-- eslint-disable vue/no-mutating-props -->\n<template>\n  <div class=\"node-configs\">\n    <div>Shape:</div>\n    <div>\n      <div class=\"control\">\n        Type:\n        <el-select v-model=\"type\">\n          <el-option label=\"circle\" value=\"circle\" />\n          <el-option label=\"rect\" value=\"rect\" />\n        </el-select>\n      </div>\n      <template v-if=\"type == 'circle'\">\n        <div class=\"control\">\n          Radius:\n          <el-slider v-model=\"radius\" :min=\"10\" :max=\"64\" :step=\"1\" />\n        </div>\n      </template>\n      <template v-else>\n        <div class=\"control\">\n          Width:\n          <el-slider v-model=\"width\" :min=\"10\" :max=\"64\" :step=\"1\" />\n        </div>\n        <div class=\"control\">\n          Height:\n          <el-slider v-model=\"height\" :min=\"10\" :max=\"64\" :step=\"1\" />\n        </div>\n        <div class=\"control\">\n          Border radius:\n          <el-slider v-model=\"borderRadius\" :min=\"0\" :max=\"16\" :step=\"1\" />\n        </div>\n      </template>\n    </div>\n    <div>Stroke:</div>\n    <div>\n      <div class=\"control\">\n        Width:\n        <el-slider v-model=\"strokeWidth\" :min=\"0\" :max=\"16\" :step=\"1\" />\n      </div>\n      <div class=\"control\">\n        Dasharray:\n        <el-input v-model=\"strokeDasharray\" />\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<script lang=\"ts\">\nimport { defineComponent, computed, WritableComputedRef } from \"vue\"\nexport default defineComponent({\n  name:'demo_label_config_panel',\n  props: {\n    type: {\n      type: String,\n      default: \"circle\",\n    },\n    radius: {\n      type: Number,\n      default: 16,\n    },\n    width: {\n      type: Number,\n      default: 32,\n    },\n    height: {\n      type: Number,\n      default: 32,\n    },\n    borderRadius: {\n      type: Number,\n      default: 4,\n    },\n    strokeWidth: {\n      type: Number,\n      default: 4,\n    },\n    strokeColor: {\n      type: String,\n      default: \"#000000\",\n    },\n    strokeDasharray: {\n      type: String,\n      default: \"none\",\n    },\n    color: {\n      type: String,\n      default: \"#000000\",\n    },\n  },\n  emits: [\n    \"update:type\",\n    \"update:radius\",\n    \"update:width\",\n    \"update:height\",\n    \"update:borderRadius\",\n    \"update:strokeWidth\",\n    \"update:strokeColor\",\n    \"update:strokeDasharray\",\n    \"update:color\",\n  ],\n  setup(props, { emit }) {\n    const vars: { [name: string]: WritableComputedRef<any> } = {}\n    const keys = Object.keys(props) as (keyof typeof props)[]\n    for (const key of keys) {\n      vars[key] = computed({\n        get: () => props[key],\n        set: v => emit(`update:${key}` as any, v),\n      })\n    }\n    return vars\n  },\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.node-configs {\n  width: 100%;\n  display: grid;\n  grid-template-columns: 60px 1fr;\n  > div:nth-child(odd) {\n    font-size: 13px;\n    font-weight: bold;\n    background-color: #efefef;\n    border: 1px solid #fff;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  > div:nth-child(even) {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    font-size: 12px;\n  }\n}\n.control {\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n  margin-left: 10px;\n}\n:deep(.el-select),\n:deep(.el-input) {\n  width: 80px;\n  margin-left: 10px;\n}\n:deep(.el-select) {\n  .el-input {\n    width: 90px;\n  }\n  margin-left: 0;\n  margin-right: 20px;\n}\n:deep(.el-slider) {\n  width: 50px;\n  margin-left: 16px;\n  margin-right: 10px;\n}\n:deep(.el-color-picker) {\n  margin-left: 10px;\n}\n</style>",{"ruleId":"41","severity":1,"message":"42","line":44,"column":31,"nodeType":"43","messageId":"44","endLine":44,"endColumn":34,"suggestions":"45"},{"ruleId":"41","severity":1,"message":"42","line":44,"column":54,"nodeType":"43","messageId":"44","endLine":44,"endColumn":57,"suggestions":"46"},{"ruleId":"41","severity":1,"message":"42","line":44,"column":77,"nodeType":"43","messageId":"44","endLine":44,"endColumn":80,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":74,"column":57,"nodeType":"50","messageId":"51","endLine":74,"endColumn":58},{"ruleId":"48","severity":1,"message":"52","line":74,"column":24,"nodeType":"50","messageId":"51","endLine":74,"endColumn":30},{"ruleId":"48","severity":1,"message":"53","line":139,"column":9,"nodeType":"50","messageId":"51","endLine":139,"endColumn":30},{"ruleId":"41","severity":1,"message":"42","line":103,"column":55,"nodeType":"43","messageId":"44","endLine":103,"endColumn":58,"suggestions":"54"},{"ruleId":"41","severity":1,"message":"42","line":108,"column":43,"nodeType":"43","messageId":"44","endLine":108,"endColumn":46,"suggestions":"55"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["56","57"],["58","59"],["60","61"],"@typescript-eslint/no-unused-vars","'e' is defined but never used.","Identifier","unusedVar","'toRefs' is defined but never used.","'VNetworkGraphInstance' is defined but never used.",["62","63"],["64","65"],{"messageId":"66","fix":"67","desc":"68"},{"messageId":"69","fix":"70","desc":"71"},{"messageId":"66","fix":"72","desc":"68"},{"messageId":"69","fix":"73","desc":"71"},{"messageId":"66","fix":"74","desc":"68"},{"messageId":"69","fix":"75","desc":"71"},{"messageId":"66","fix":"76","desc":"68"},{"messageId":"69","fix":"77","desc":"71"},{"messageId":"66","fix":"78","desc":"68"},{"messageId":"69","fix":"79","desc":"71"},"suggestUnknown",{"range":"80","text":"81"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"80","text":"82"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"83","text":"81"},{"range":"83","text":"82"},{"range":"84","text":"81"},{"range":"84","text":"82"},{"range":"85","text":"81"},{"range":"85","text":"82"},{"range":"86","text":"81"},{"range":"86","text":"82"},[943,946],"unknown","never",[966,969],[989,992],[2355,2358],[2561,2564]]